openapi: 3.0.1
info:
  title: CTO
  description: All api documentation.
  version: "1.0.2"
  contact:
    name: API Support
    email: qufiwefefwoyn@gmail.com

servers:
  - url: https://ctopanel.com/api
    description: Production.
  - url: http://127.0.0.1:8888/api
    description: Local core service.
  - url: http://127.0.0.1:9010/api
    description: Local porter service.
  - url: http://127.0.0.1:8900/api
    description: Local loginput service.

tags:
  - name: core
    description: core service (8888 internal port)
  - name: porter
    description: porter service (9010 internal port; 50051 grpc)
  - name: loginput
    description: loginput service (8900 internal port)

paths:
  /loginput/fluentd:
    post:
      tags:
        - loginput
      summary: Fluentd input.
      security:
        - FluentdBasicAuth: []
      responses:
        "200":
          description: "OK"
        "401":
          description: "Not Authorized"
        "403":
          description: "Forbidden"
  /core/temp/{projectID}:
    get:
      tags: [core]
      summary: Debug service gets key directly from badger - may be removed in future.
      parameters:
        - $ref: "#/components/parameters/projectID"
        - in: query
          name: key
          schema:
            type: string
      responses:
        "200":
          description: "OK"
  /core/setproject/{projectID}:
    post:
      tags: [core]
      summary: Set new project.
      parameters:
        - $ref: "#/components/parameters/projectID"
      responses:
        "200":
          description: "OK"
  /core/multi:
    delete:
      tags: [core]
      summary: Delete all keys with specified prefix.
      parameters:
        - in: query
          name: prefix
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "OK"
  /porter/query/exact:
    get:
      tags: [porter]
      summary: Exact log by badger key.
      parameters:
        - in: query
          name: key
          schema:
            type: string
          description: Exact badger key.
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: "OK"
        "401":
          description: "Not Authorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Key not found"
  /porter/query/range:
    post:
      tags: [porter]
      summary: Post range query.
      parameters:
        - in: query
          name: token
          schema:
            type: string
          description: JWT token
        - in: query
          name: query
          schema:
            type: string
          description: Base query.
        - in: query
          name: fields
          schema:
            type: string
          description: List of fields to include in response.
        - in: query
          name: regex
          schema:
            type: string
          description: Regex reqest to filter one field.
      responses:
        "200":
          description: "OK"
        "401":
          description: "Not Authorized"
        "403":
          description: "Forbidden"
  /porter/query/poll:
    get:
      tags: [porter]
      summary: Poll for range query results.
      parameters:
        - in: query
          name: token
          schema:
            type: string
          description: JWT token
        - in: query
          name: qid
          schema:
            type: string
          description: Query ID.
      responses:
        '200':
          description: OK
        "401":
          description: "Not Authorized"
        "403":
          description: "Forbidden"
        "404":
          description: Query not found.
  /porter/signin/login:
    get:
      tags: [porter]
      summary: Request Google OAuth login.
      responses:
        '300':
          description: Redirects to callback page.
  /porter/signin/callback:
    get:
      tags: [porter]
      summary: Callback page after authentication.
      responses:
        '200':
          description: OK
  /porter/me/project:
    get:
      tags: [porter]
      summary: Get projects belonging to me.
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
  /porter/me/project/new:
    get:
      tags: [porter]
      summary: Redirects to telegram to create a new project.
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        '300':
          description: Redirect
  /porter/project/{projectID}:
    get:
      tags: [porter]
      summary: Get project name by it's ID.
      parameters:
        - $ref: "#/components/parameters/projectID"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
  /porter/project/{projectID}/issues:
    get:
      tags: [porter]
      summary: Get all known issues for a project.
      parameters:
        - $ref: "#/components/parameters/projectID"
        - $ref: "#/components/parameters/token"
      responses:
        '200':
          description: OK
  /porter/project/{projectID}/environments:
    get:
      tags: [porter]
      summary: Get all known environments for a project.
      parameters:
        - $ref: "#/components/parameters/projectID"
        - $ref: "#/components/parameters/token"
      responses:
        '200':
          description: OK
  /porter/project/{projectID}/services:
    get:
      tags: [porter]
      summary: Get all known services for a project.
      parameters:
        - $ref: "#/components/parameters/projectID"
        - $ref: "#/components/parameters/token"
        - in: query
          name: env
          schema:
            type: string
          required: true
          description: Environment to fetch services for.
      responses:
        '200':
          description: OK

components:
  parameters:
    projectID:
      in: path
      name: projectID
      schema:
        type: string
        format: uuid
      required: true
      description: Project ID
    token:
      in: query
      name: token
      schema:
        type: string
      required: true
      description: JWT token

  schemas:
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid

  securitySchemes:
    TokenAuth:
      type: apiKey
      name: Authorization
      in: header
      description: Token-based authentication with required prefix "Token"
    FluentdBasicAuth:
      type: http
      scheme: basic
      description: >
        Fluentd basic auth. Username is project name, password is project secret.
