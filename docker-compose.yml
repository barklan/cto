version: "3.8"
services:

  traefik:
    image: traefik:2.5.5
    ports:
      - '80:80'
      - '443:443'
    networks:
      - traefik-public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-public-certificates:/certificates
      - '${PROJECT_PATH-.}/environment:/app/config'
    command:
      - --providers.docker
      - --providers.docker.watch=true
      - --providers.docker.constraints=Label(`traefik.constraint-label`,
        `traefik-public`)
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --certificatesresolvers.le.acme.email=qufiwefefwoyn@gmail.com
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --accesslog
      - --log
      - --api
    env_file:
      - ./.env
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        - traefik.http.routers.traefik-public-http.rule=Host(`traefik.${DOMAIN?Variable
          not set}`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        - traefik.http.routers.traefik-public-https.rule=Host(`traefik.${DOMAIN?Variable
          not set}`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        - traefik.http.routers.traefik-public-https.service=api@internal
        - traefik.http.routers.traefik-public-https.tls.certresolver=le
        - traefik.http.services.traefik-public.loadbalancer.server.port=8085
        # Auth
        - traefik.http.middlewares.adminauth.basicauth.usersfile=/app/config/adminauth
        - traefik.http.routers.traefik-public-http.middlewares=adminauth
        - traefik.http.routers.traefik-public-https.middlewares=adminauth

  frontend:
    image: barklan/cto-explorer:rolling
    build:
      context: ./frontend
      dockerfile: ../dockerfiles/frontend.dockerfile
    ports:
      - 3333:3333
    networks:
      - traefik-public
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.frontend-http.rule=Host(`${DOMAIN?Variable not
          set}`) && PathPrefix(`/`) && !PathPrefix(`/api/`)
        - traefik.http.routers.frontend-http.entrypoints=http
        - traefik.http.services.frontend.loadbalancer.server.port=80
        - traefik.http.routers.frontend-http.middlewares=https-redirect
        - traefik.http.routers.frontend-https.rule=Host(`${DOMAIN?Variable not
          set}`) && PathPrefix(`/`) && !PathPrefix(`/api/`)
        - traefik.http.routers.frontend-https.entrypoints=https
        - traefik.http.routers.frontend-https.tls=true
        - traefik.http.routers.frontend-https.tls.certresolver=le

  backend:
    image: barklan/cto-core:rolling
    build:
      context: .
      dockerfile: dockerfiles/core.dockerfile
    ports:
      - 8080:8080
      - 8888:8888
    networks:
      - traefik-public
    volumes:
      - cto-data:/app/data
      - cto-media:/app/media
      - '${PROJECT_PATH-.}/environment:/app/config'
    env_file:
      - ./.env
    environment:
      # CONFIG_ENV should be one of "dev", "devdocker", "prod"
      - CONFIG_ENV=prod
    deploy:
      placement:
        constraints:
          - node.role == manager
      # TODO remove api from this
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.backend-http.rule=Host(`${DOMAIN?Variable not
          set}`) && (PathPrefix(`/api/`))
        - traefik.http.routers.backend-http.entrypoints=http
        - traefik.http.routers.backend-http.middlewares=https-redirect
        - traefik.http.routers.backend-https.rule=Host(`${DOMAIN?Variable not
          set}`) && (PathPrefix(`/api/`))
        - traefik.http.routers.backend-https.entrypoints=https
        - traefik.http.routers.backend-https.tls=true
        - traefik.http.routers.backend-https.tls.certresolver=le
        - traefik.http.services.backend.loadbalancer.server.port=8080

  porter:
    image: barklan/cto-porter:rolling
    build:
      context: .
      dockerfile: dockerfiles/porter.dockerfile
    ports:
      - 9010:9010
      - 50051:50051
    networks:
      - traefik-public
    volumes:
      - '${PROJECT_PATH-.}/environment:/app/config'
    env_file:
      - ./.env
    environment:
      # CONFIG_ENV should be one of "dev", "devdocker", "prod"
      - CONFIG_ENV=prod
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.porter-http.rule=Host(`${DOMAIN?Variable not
          set}`) && (PathPrefix(`/api/porter/`))
        - traefik.http.routers.porter-http.entrypoints=http
        - traefik.http.routers.porter-http.middlewares=https-redirect
        - traefik.http.routers.porter-https.rule=Host(`${DOMAIN?Variable not
          set}`) && (PathPrefix(`/api/porter/`))
        - traefik.http.routers.porter-https.entrypoints=https
        - traefik.http.routers.porter-https.tls=true
        - traefik.http.routers.porter-https.tls.certresolver=le
        - traefik.http.services.porter.loadbalancer.server.port=9010

  loginput:
    image: barklan/cto-loginput:rolling
    build:
      context: .
      dockerfile: dockerfiles/loginput.dockerfile
    ports:
      - 8900:8900
    networks:
      - traefik-public
    env_file:
      - ./.env
    environment:
      # CONFIG_ENV should be one of "dev", "devdocker", "prod"
      - CONFIG_ENV=prod
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.loginput-http.rule=Host(`${DOMAIN?Variable not
          set}`) && (PathPrefix(`/api/loginput/`))
        - traefik.http.routers.loginput-http.entrypoints=http
        - traefik.http.routers.loginput-http.middlewares=https-redirect
        - traefik.http.routers.loginput-https.rule=Host(`${DOMAIN?Variable not
          set}`) && (PathPrefix(`/api/loginput/`))
        - traefik.http.routers.loginput-https.entrypoints=https
        - traefik.http.routers.loginput-https.tls=true
        - traefik.http.routers.loginput-https.tls.certresolver=le
        - traefik.http.services.loginput.loadbalancer.server.port=8900

  db:
    image: 'postgres:14.1'
    networks:
      - traefik-public
    volumes:
      - cto-postgres:/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    env_file:
      ./.env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      # THIS IS UNSAFE!
      # - POSTGRES_HOST_AUTH_METHOD=trust
    deploy:
      placement:
        constraints:
          - node.role == manager

  rabbitmq:
    image: 'rabbitmq:3.9.11-management'
    env_file:
      - .env
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - traefik-public
    deploy:
      placement:
        constraints:
          - node.role == manager

  cache:
    image: 'redis:6.2.6'
    ports:
      - 6379:6379
    networks:
      - traefik-public

volumes:
  traefik-public-certificates: null
  cto-data:
    external: true
  cto-media:
    external: false
  cto-postgres:
    external: true

# docker network create --driver=overlay --attachable traefik-public
networks:
  traefik-public:
    external: true
